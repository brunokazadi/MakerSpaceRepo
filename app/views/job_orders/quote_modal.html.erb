<div id="quote-modal-rendered">
  <%= form_for(@job_order, url: job_order_quote_url(@job_order), html: { multipart: true }) do |f| %>
    <div class="modal-body">
      <%= hidden_field_tag :approved, true %>

      <% @job_order.job_tasks.each do |task| %>
        <% job_task_quote = task.job_task_quote || task.build_job_task_quote %>

        <div class="card mb-4">
          <div class="card-header">
            <h5 class="m-0">
              <%= task.title || "Task ##{task.id}" %>
              <span class="ms-1 text-muted fs-6">
                <%= task.job_type.name %>
                <% if task.job_service.present? %>
                  -
                  <%= task.job_service.name %> (<%= task.job_service.job_service_group.name %>)
                <% end %>
              </span>
            </h5>
          </div>
          <div class="card-body">
            <!-- Base Fee -->
            <div class="form-group">
              <%= label_tag "job_task_quote_price_#{task.id}", "Base Fee (CAD)" %>
              <div class="input-group mb-3">
                <div class="input-group-prepend">
                  <span class="input-group-text">$</span>
                </div>
                <%= number_field_tag "job_task_quote_price_#{task.id}",
                      job_task_quote.price,
                      placeholder: number_with_precision(task.job_type.service_fee, precision: 2),
                      step: '0.01', class: 'form-control money-input base-fee' %>
              </div>
            </div>

            <!-- Service -->
            <% if task.job_service.present? %>
              <% qt_service = job_task_quote.job_task_quote_service || job_task_quote.job_task_quote_service.build(job_service: task.job_service) %>
              <% default_service_price = @job_order.user.internal? ? task.job_service.internal_price : task.job_service.external_price %>
              <div class="row">
                <div class="col-md-6">
                  <div class="form-group">
                    <%= label_tag "task_#{task.id}_service_qty", "Number of #{task.job_service.unit || 'unit'}" %>
                    <%= number_field_tag "task_#{task.id}_service_qty",
                          qt_service.quantity,
                          placeholder: '0', 
                          step: '0.01', class: 'form-control service-qty' %>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="form-group">
                    <%= label_tag "task_#{task.id}_service_price", "Price per #{task.job_service.unit || 'unit'} (CAD)" %>
                    <div class="input-group mb-3">
                      <div class="input-group-prepend">
                        <span class="input-group-text">$</span>
                      </div>
                      <%= number_field_tag "task_#{task.id}_service_price",
                            qt_service.price,
                            placeholder: number_with_precision(default_service_price, precision: 2),
                            step: '0.01', class: 'form-control money-input service-price' %>
                    </div>
                  </div>
                </div>
              </div>
            <% end %>

            <!-- Options -->
            <% task.job_task_options.each do |option| %>
              <% qt_option = job_task_quote.job_task_quote_options.find_or_initialize_by(job_option_id: option.job_option_id) %>
              <div class="form-group">
                <%= label_tag "task_#{task.id}_option_price_#{option.job_option_id}", "#{option.job_option.name} (CAD)" %>
                <div class="input-group mb-3">
                  <div class="input-group-prepend">
                    <span class="input-group-text">$</span>
                  </div>
                  <%= number_field_tag "task_#{task.id}_option_price_#{option.job_option_id}",
                        qt_option.price,
                        placeholder: number_with_precision(option.job_option.fee, precision: 2),
                        step: '0.01', class: 'form-control money-input option-price' %>
                </div>
              </div>
            <% end %>

            <!-- Staff Files -->
            <div class="form-group my-3">
              <%= label_tag "task_#{task.id}_staff_files", 'Staff Files (GCode, PDF, etc.)' %>
              <%= file_field_tag "task_#{task.id}_staff_files[]", multiple: true, class: 'form-control inanimate mb-2' %>
            </div>
          </div>
        </div>
      <% end %>

      <!-- User Comments -->
      <div class="form-group mb-3">
        <%= f.label :user_comments, 'Comments for the user (will send as a chat)' %>
        <%= text_field_tag :user_comments, nil, placeholder: 'I will need to add supports', class: 'form-control inanimate mb-2' %>
      </div>

      <div class="form-group mb-3">
        <%= f.label :staff_comments, 'Comments for the staff members' %>
        <%= f.text_field :staff_comments, placeholder: 'Use the Raise 3D', class: 'form-control inanimate' %>
      </div>

      <!-- Total Display -->
      <div class="alert alert-info text-end fw-bold" id="quote-total">
        Total: $<span id="quote-total-value">0.00</span>
      </div>

      <%= f.submit 'Approve', class: 'btn btn-primary' %>
    </div>
  <% end %>
</div>

<script>
  function parseVal(el) {
    const val = parseFloat(el.value);
    return isNaN(val) ? 0.0 : val;
  }

  function calculateTotal() {
    let total = 0.0;

    document.querySelectorAll(".card").forEach(card => {
      let baseFee = parseVal(card.querySelector(".base-fee") || { value: 0 });
      let qty = parseVal(card.querySelector(".service-qty") || { value: 0 });
      let pricePer = parseVal(card.querySelector(".service-price") || { value: 0 });

      let serviceTotal = qty * pricePer;
      total += baseFee + serviceTotal;

      card.querySelectorAll(".option-price").forEach(opt => {
        total += parseVal(opt);
      });
    });

    document.getElementById("quote-total-value").textContent = total.toFixed(2);
  }

  document.querySelectorAll(".money-input, .service-qty").forEach((el) => {
    el.addEventListener("input", calculateTotal);
    el.addEventListener("blur", () => {
      if (el.value !== "") el.value = parseVal(el).toFixed(2);
      calculateTotal();
    });
  });

  document.addEventListener("DOMContentLoaded", setTimeout(calculateTotal, 10)); // Without timeout, total stays at 0 until input for some reason
</script>
